[{"path":"https://smwoodman.github.io/eSDM/articles/example-analysis.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Example analysis - Woodman et al 2019","text":"eSDM allows users create ensembles predictions species distribution models (SDMs), either using eSDM GUI manually R using eSDM functions. vignette demonstrates creating evaluating ensembles using eSDM functions manually performing example analysis Woodman et al. (2019). example analysis explores differences blue whale SDM predictions California Current Ecosystem (CCE) Becker et al. (2016; .e., Model_B), Hazen et al. (2017; .e., Model_H), Redfern et al. (2017; .e., Model_R). also creates evaluates ensembles predictions, associated uncertainty. See Woodman et al. (2019) additional details, particular Table 1 details differences models. vignette, three sets predictions validation data read .rds files original files large included package. sections data imported includes code reading data original files, although code commented . original files can downloaded GUI https://github.com/smwoodman/eSDM-data. document contains code plotting predictions. However, default plotting code run can take several minutes (code chunks contain comment “code run”). desired, may run code chunks manually R. using data example analysis, please see README.txt file proper citation information (located system.file(\"extdata/README.txt\", package = \"eSDM\") contact author.","code":""},{"path":"https://smwoodman.github.io/eSDM/articles/example-analysis.html","id":"import-sdm-predictions","dir":"Articles","previous_headings":"","what":"Import SDM predictions","title":"Example analysis - Woodman et al 2019","text":"first step example analysis import process Model_B, Model_H, Model_R predictions, along standard error (SE) values. Use pts2poly_centroids create sf objects polygon centroids CSV files, raster::raster import raster files, sf::st_read import GIS files. dimensions Model_B Model_H predictions 0.09 x 0.09 degrees 0.25 x 0.25 degrees, respectively; second argument pts2poly_centroids half length one side polygon. GIS files already defined geometry read st_read. overlaying predictions, must ensure following: predictions sf objects. See examples converting CSV file grid centroids raster object sf object. geometries predictions valid; can checked using sf::st_is_valid. geometries predictions defined coordinate reference system (crs); can checked using sf::st_crs. predictions longitudinal range (.e., either [0, 360] [-180, 180]); can checked using sf::st_bbox. can use sf::st_wrap_dateline convert sf object longitudinal range [-180, 180], note cause plots span [-180, 180] well. can visualize SDM predictions importing processing . plots make Fig. 3 Woodman et al. (2019). vignette uses custom plot_sf_3panel function (‘vignette_helper.R’ located system.file(\"vignette_helper.R\", package = \"eSDM\") plotting. plot_sf_3panel tmap_sdm (used later vignette) included functions eSDM package specific example analysis region SDMs. However, can provide guidelines framework plotting SDMs using sf tmap packages, allowing adapt functions specific plotting needs.","code":"# Import, process, and plot Model_B predictions # model.b <- read.csv(\"Predictions_Beckeretal2016.csv\") model.b.sf <- readRDS(system.file(\"extdata/Predictions_Beckeretal2016.rds\", package = \"eSDM\")) %>%    eSDM::pts2poly_centroids(0.09 / 2, crs = 4326) %>%   st_wrap_dateline() %>%   st_set_agr(\"constant\")  model.b.sf #> Simple feature collection with 14807 features and 2 fields #> Attribute-geometry relationship: 2 constant, 0 aggregate, 0 identity #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -131.085 ymin: 30.045 xmax: -117.135 ymax: 48.585 #> Geodetic CRS:  WGS 84 #> First 10 features: #>        pred_bm           se                       geometry #> 1  5.45105e-05 5.097233e-05 POLYGON ((-123.525 30.135, ... #> 2  5.24382e-05 5.361254e-05 POLYGON ((-123.435 30.135, ... #> 3  4.69742e-05 5.109131e-05 POLYGON ((-123.345 30.135, ... #> 4  4.23983e-05 4.816211e-05 POLYGON ((-123.255 30.135, ... #> 5  4.36095e-05 5.090475e-05 POLYGON ((-123.165 30.135, ... #> 6  1.07515e-04 8.646826e-05 POLYGON ((-123.705 30.225, ... #> 7  1.28310e-04 1.032217e-04 POLYGON ((-123.615 30.225, ... #> 8  1.18435e-04 1.022898e-04 POLYGON ((-123.525 30.225, ... #> 9  1.09491e-04 1.067405e-04 POLYGON ((-123.435 30.225, ... #> 10 1.07454e-04 1.186867e-04 POLYGON ((-123.345 30.225, ...  # Make base map map.world <- eSDM::gshhg.l.L16  # Other option for making base map # map.world <- st_geometry(st_as_sf(maps::map('world', plot = FALSE, fill = TRUE))) plot_sf_3panel(   model.b.sf, \"pred_bm\", main.txt = \"Model_B - \", map.base = map.world,    x.axis.at = c(-130, -125, -120) ) # Import, process, and plot Model_H predictions # model.h <- read.csv(\"Predictions_Hazenetal2017.csv\") model.h.sf <- readRDS(system.file(\"extdata/Predictions_Hazenetal2017.rds\", package = \"eSDM\")) %>%    dplyr::select(lon, lat, pred_bm, se) %>%   eSDM::pts2poly_centroids(0.25 / 2, crs = 4326, agr = \"constant\")  model.h.sf #> Simple feature collection with 4052 features and 2 fields #> Attribute-geometry relationship: 2 constant, 0 aggregate, 0 identity #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -135.125 ymin: 29.875 xmax: -115.875 ymax: 49.125 #> Geodetic CRS:  WGS 84 #> First 10 features: #>       pred_bm          se                       geometry #> 1  0.04554697 0.053372075 POLYGON ((-134.875 30.125, ... #> 2  0.03947545 0.033144082 POLYGON ((-134.625 30.125, ... #> 3  0.05845509 0.034460358 POLYGON ((-134.375 30.125, ... #> 4  0.05839801 0.036792245 POLYGON ((-134.125 30.125, ... #> 5  0.07102714 0.041752473 POLYGON ((-133.875 30.125, ... #> 6  0.04468036 0.018479887 POLYGON ((-133.625 30.125, ... #> 7  0.05754484 0.009460079 POLYGON ((-133.375 30.125, ... #> 8  0.03529852 0.017022402 POLYGON ((-133.125 30.125, ... #> 9  0.10666410 0.063944752 POLYGON ((-132.875 30.125, ... #> 10 0.11393473 0.061255526 POLYGON ((-132.625 30.125, ... plot_sf_3panel(   model.h.sf, \"pred_bm\", main.txt = \"Model_H - \", map.base = map.world,    x.axis.at = c(-135, -130, -125, -120) ) # Import, process, and plot Model_R predictions # model.r <- st_read(\"Shapefiles/Predictions_Redfernetal2017.shp\") model.r.sf <- readRDS(system.file(\"extdata/Predictions_Redfernetal2017.rds\", package = \"eSDM\")) %>%    st_make_valid() %>%   st_set_agr(\"constant\") #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs()  model.r.sf #> Simple feature collection with 11419 features and 2 fields #> Attribute-geometry relationship: 2 constant, 0 aggregate, 0 identity #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -14587510 ymin: 3176115 xmax: -13037510 ymax: 4766115 #> CRS:           +proj=cea +lon_0=0 +lat_ts=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs #> First 10 features: #>        pred_bm           se                       geometry #> 1  0.008025090 0.0064684470 MULTIPOLYGON (((-13037935 3... #> 2  0.009190831 0.0074858911 MULTIPOLYGON (((-13047508 3... #> 3  0.007789538 0.0063127310 MULTIPOLYGON (((-13046258 3... #> 4  0.004794084 0.0007867314 MULTIPOLYGON (((-13197508 3... #> 5  0.004978912 0.0015665607 MULTIPOLYGON (((-13177508 3... #> 6  0.004869921 0.0008426572 MULTIPOLYGON (((-13197508 3... #> 7  0.004953553 0.0012025559 MULTIPOLYGON (((-13196624 3... #> 8  0.004699313 0.0014451453 MULTIPOLYGON (((-13177508 3... #> 9  0.004930461 0.0011039563 MULTIPOLYGON (((-13197508 3... #> 10          NA           NA MULTIPOLYGON (((-13067508 3... plot_sf_3panel(   model.r.sf, \"pred_bm\", main.txt = \"Model_R - \", map.base = map.world,    x.axis.at = c(-130, -125, -120) ) # Example code for converting raster to sf object; code not run logo <- raster::raster(system.file(\"external/rlogo.grd\", package=\"raster\")) logo.sf <- as(logo, \"SpatialPolygonsDataFrame\") %>%    sf::st_as_sf()"},{"path":"https://smwoodman.github.io/eSDM/articles/example-analysis.html","id":"overlay-predictions","dir":"Articles","previous_headings":"","what":"Overlay predictions","title":"Example analysis - Woodman et al 2019","text":"original predictions different spatial resolutions coordinate systems, must overlay onto base geometry. See Woodman et al. (2019), eSDM GUI manual, overlay_sdm documentation details overlay process. example analysis, use geometry Model_R base geometry. However, first must import process study area erasing polygons, clip erase land base geometry, respectively. also visualize base geometry.  Next, convert associated uncertainty values variance. Uncertainty values must overlaid variance values remain statistically valid. Now can overlay original predictions onto base geometry. Note clipped erased land base geometry, simply use original Model_R predictions geometry. However, can ‘overlay’ Model_R predictions matching indices base geometry polygons Model_R prediction values. , .e., running overlay_sdm(base.geom, model.r.sf, ...), important intersecting complex polygon (basically) computationally complex. NOTE: code block run vignette processing times. relevant, pre-computed outputs loaded following code block: can plot overlaid predictions show overlaid distribution patterns similar original predictions.","code":"# Study area polygon poly.study <- st_read(system.file(\"extdata/Shapefiles/Study_Area_CCE.shp\", package = \"eSDM\")) %>%   st_geometry() %>%    st_transform(st_crs(model.r.sf)) #> Reading layer `Study_Area_CCE' from data source  #>   `/home/runner/work/_temp/Library/eSDM/extdata/Shapefiles/Study_Area_CCE.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 1 feature and 6 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -131 ymin: 30.05 xmax: -117.013 ymax: 48.6 #> Geodetic CRS:  WGS 84  # Erasing polygon; clip to the buffered study area polygon reduces future computation time poly.erase <- eSDM::gshhg.l.L16 %>%   st_transform(st_crs(model.r.sf)) %>%   st_make_valid() %>%   st_crop(st_buffer(poly.study, 100000)) #> old-style crs object detected; please recreate object with a recent sf::st_crs()  # Create the base geometry; st_erase() function defined in eSDM_vignette_helper.R #   Keep base.geom.sf so we don't have to run overlay function on model.r.sf base.geom.sf <- model.r.sf %>%   mutate(idx = 1:nrow(model.r.sf)) %>%    select(idx) %>%    st_set_agr(\"constant\") %>%    # st_geometry() %>%   st_erase(poly.erase) %>%    st_intersection(poly.study) %>%   st_cast(\"MULTIPOLYGON\") #> Warning: attribute variables are assumed to be spatially constant throughout all #> geometries  base.geom <- st_geometry(base.geom.sf) # Visualize the base geometry plot(st_transform(base.geom, 4326), col = NA, border = \"black\", axes = TRUE) plot(map.world, add = TRUE, col = \"tan\", border = NA) graphics::box() # Convert SE values to variance model.b.sf <- model.b.sf %>%    mutate(variance = se^2) %>%    dplyr::select(pred_bm, se, variance) model.h.sf <- model.h.sf %>%    mutate(variance = se^2) %>%    dplyr::select(pred_bm, se, variance) model.r.sf <- model.r.sf %>%    mutate(variance = se^2) %>%    dplyr::select(pred_bm, se, variance) ### CODE BLOCK NOT RUN # Perform overlay, and convert overlaid uncertainty values to SEs over1.sf <- eSDM::overlay_sdm(base.geom, st_transform(model.b.sf, st_crs(base.geom)), c(\"pred_bm\", \"variance\"), 50) %>%    mutate(se = sqrt(variance)) over2.sf <- eSDM::overlay_sdm(base.geom, st_transform(model.h.sf, st_crs(base.geom)), c(\"pred_bm\", \"variance\"), 50) %>%    mutate(se = sqrt(variance)) # over3.sf <- eSDM::overlay_sdm(base.geom, model.r.sf, c(\"pred_bm\", \"variance\"), 50) %>%  #   mutate(se = sqrt(variance))  # ## Save these results for CRAN # saveRDS(over1.sf, file = \"../inst/extdata/Predictions_Beckeretal2016_overlaid.rds\") # saveRDS(over2.sf, file = \"../inst/extdata/Predictions_Hazenetal2017_overlaid.rds\") over1.sf <- readRDS(system.file(\"extdata/Predictions_Beckeretal2016_overlaid.rds\", package = \"eSDM\")) %>%    st_set_crs(st_crs(base.geom)) over2.sf <- readRDS(system.file(\"extdata/Predictions_Hazenetal2017_overlaid.rds\", package = \"eSDM\")) %>%    st_set_crs(st_crs(base.geom))  over3.sf <- st_drop_geometry(model.r.sf) %>%    mutate(idx = 1:nrow(model.r.sf)) %>%    left_join(base.geom.sf, by = \"idx\") %>%    select(-idx) %>%    st_as_sf() # Plot overlaid predictions; code not run plot_sf_3panel(over1.sf, \"pred_bm\", main.txt = \"Overlaid Model_B - \", map.base = map.world) plot_sf_3panel(over2.sf, \"pred_bm\", main.txt = \"Overlaid Model_H - \", map.base = map.world) plot_sf_3panel(over3.sf, \"pred_bm\", main.txt = \"Overlaid Model_R - \", map.base = map.world)"},{"path":"https://smwoodman.github.io/eSDM/articles/example-analysis.html","id":"calculate-evaluation-metrics","dir":"Articles","previous_headings":"","what":"Calculate evaluation metrics","title":"Example analysis - Woodman et al 2019","text":"evaluate predictions create ensembles weights based evaluation metrics, must load process validation data sets use evaluation_metrics. validation data must points class sf column either binary presence/absence count data. example analysis, use three validation sets example analysis, line transect data (Becker et al. 2016), home range data (Irvine et al. 2014), two data sets combined. validation data binary (.e., presence/absence), column indicating whether value presence point (1) absence point (0). Note vignette, validation data read .rds files original file big included package. However, original file can downloaded GUI https://github.com/smwoodman/eSDM-data Use function sf::st_as_sf convert data frame lon/lat coordinates sf object. Validation data summary Now can calculate AUC TSS metrics original overlaid predictions. displayed table Table 3 Woodman et al. (2019). Note evaluation_metrics requires validation data coordinate reference system predictions evaluated. Evaluation metrics can see set predictions, original overlaid evaluation metrics quite similar, showing overlay conserved predicted blue whale distributions.","code":"# Import and process validation data # valid.data <- read.csv(\"eSDM_Validation_data_all.csv\", stringsAsFactors = FALSE) valid.data <- readRDS(system.file(\"extdata/eSDM_Validation_data_all.rds\", package = \"eSDM\"))%>%    arrange(source, lat, lon) %>%    mutate(pres_abs = ifelse(pres_abs > 0, 1, 0)) %>% #For demonstration purposes; pres_abs column is already binary   st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326, agr = \"constant\") %>%   st_transform(st_crs(base.geom))  # Extract the line transect and home range validation data valid.data.lt <- valid.data %>% filter(source == \"Becker_et_al_2016\") valid.data.hr <- valid.data %>% filter(source == \"Irvine_et_al_2014\")  # Summarize the number of presence and absence points valid.data %>%    st_set_geometry(NULL) %>%    group_by(source) %>%     summarize(pres = sum(pres_abs == 1),              abs = sum(pres_abs == 0)) %>%    knitr::kable(caption = \"Validation data summary\") # Calculate evaluation metrics with different validation data sets; code not run names.1 <- c(   \"Model_B_orig\", \"Model_H_orig\", \"Model_R_orig\",    \"Model_B_overlaid\", \"Model_H_overlaid\", \"Model_R_overlaid\" )  eval.lt <- data.frame(do.call(rbind, list(   eSDM::evaluation_metrics(model.b.sf, 1, st_transform(valid.data.lt, 4326), \"pres_abs\"),    eSDM::evaluation_metrics(model.h.sf, 1, st_transform(valid.data.lt, 4326), \"pres_abs\"),    eSDM::evaluation_metrics(model.r.sf, 1, valid.data.lt, \"pres_abs\"),    eSDM::evaluation_metrics(over1.sf, 1, valid.data.lt, \"pres_abs\"),    eSDM::evaluation_metrics(over2.sf, 1, valid.data.lt, \"pres_abs\"),    eSDM::evaluation_metrics(over3.sf, 1, valid.data.lt, \"pres_abs\") ))) %>%   mutate(Preds = names.1) %>%   dplyr::select(Preds, AUC_LT = X1, TSS_LT = X2)  eval.hr <- data.frame(do.call(rbind, list(   eSDM::evaluation_metrics(model.b.sf, 1, st_transform(valid.data.hr, 4326), \"pres_abs\"),    eSDM::evaluation_metrics(model.h.sf, 1, st_transform(valid.data.hr, 4326), \"pres_abs\"),    eSDM::evaluation_metrics(model.r.sf, 1, valid.data.hr, \"pres_abs\"),    eSDM::evaluation_metrics(over1.sf, 1, valid.data.hr, \"pres_abs\"),    eSDM::evaluation_metrics(over2.sf, 1, valid.data.hr, \"pres_abs\"),    eSDM::evaluation_metrics(over3.sf, 1, valid.data.hr, \"pres_abs\") ))) %>%   mutate(Preds = names.1) %>%   dplyr::select(Preds, AUC_HR = X1, TSS_HR = X2)  eval.combo <- data.frame(do.call(rbind, list(   eSDM::evaluation_metrics(model.b.sf, 1, st_transform(valid.data, 4326), \"pres_abs\"),    eSDM::evaluation_metrics(model.h.sf, 1, st_transform(valid.data, 4326), \"pres_abs\"),    eSDM::evaluation_metrics(model.r.sf, 1, valid.data, \"pres_abs\"),    eSDM::evaluation_metrics(over1.sf, 1, valid.data, \"pres_abs\"),    eSDM::evaluation_metrics(over2.sf, 1, valid.data, \"pres_abs\"),    eSDM::evaluation_metrics(over3.sf, 1, valid.data, \"pres_abs\") ))) %>%   mutate(Preds = names.1) %>%   dplyr::select(Preds, AUC = X1, TSS = X2) read.csv(system.file(\"extdata/Table3.csv\", package = \"eSDM\")) %>%   filter(grepl(\"Model_\", Predictions)) %>%    dplyr::select(Predictions, AUC, TSS, `AUC-LT` = AUC.LT, `TSS-LT` = TSS.LT,                  `AUC-HR` = AUC.HR, `TSS-HR` = TSS.HR) %>%    knitr::kable(caption = \"Evaluation metrics\", digits = 3, align = \"lcccccc\")"},{"path":"https://smwoodman.github.io/eSDM/articles/example-analysis.html","id":"create-and-evaluate-ensemble-predictions","dir":"Articles","previous_headings":"","what":"Create and evaluate ensemble predictions","title":"Example analysis - Woodman et al 2019","text":"creating ensembles, must rescale overlaid predictions. rescaled predictions using abundance rescaling method abundance 1648 (Becker et al. 2016). Using sum 1 rescaling method result ensembles similar distribution patterns, actual density values used provide meaningful abundance estimate. ensemble_rescale requires single sf object contains data rescaled. Thus, extract prediction variance values using rescaling function. can see prediction values now much comparable, thus subset predictions contribute disproportionately ensemble. also must calculate ensemble weights, must manually created. example analysis, use several weighting methods: equal weights (.e., unweighted), AUC-based weights, TSS-based weights, weights calculated inverse prediction variance. set weights must sum 1, row must sum 1 case weights calculated inverse prediction variance. Note calculating evaluation metrics, message printed validation data points intersect prediction polygon. Finally, can create ensembles. calculate ensemble uncertainty values among-model variance. also estimated within-model ensemble uncertainty using x.var.idx argument, demonstrated following code (run). Now can calculate AUC TSS scores ensembles compare original ensemble predictions. , evaluation code run; displayed table Table 3 Woodman et al. (2019). Evaluation metrics can see ensemble weights based TSS values highest scores ensemble predictions, mostly higher scores original predictions. can visualize ensemble compare known blue whale habitat.  code visualize unweighted ensembles ensemble (.e., create plots similar Figs. 4 5 Woodman et al.). code uses custom functions (located system.file(\"eSDM_vignette_helper.R\", package = \"eSDM\")) leverage tmap package generate plots. However, default code run plot takes several minutes generate.","code":"# Rescale predictions over.sf <- bind_cols(   over1.sf %>% st_set_geometry(NULL) %>% dplyr::select(pred_bm1 = pred_bm, var1 = variance),    over2.sf %>% st_set_geometry(NULL) %>% dplyr::select(pred_bm2 = pred_bm, var2 = variance),    over3.sf %>% st_set_geometry(NULL) %>% dplyr::select(pred_bm3 = pred_bm, var3 = variance) ) %>%    st_sf(geometry = base.geom, agr = \"constant\")  over.sf.rescaled <- ensemble_rescale(   over.sf, c(\"pred_bm1\", \"pred_bm2\", \"pred_bm3\"), \"abundance\", 1648,    x.var.idx = c(\"var1\", \"var2\", \"var3\") )  # Check that overlaid predictions predict expected abundance eSDM::model_abundance(over.sf.rescaled, \"pred_bm1\") #> pred_bm1  #>     1648 eSDM::model_abundance(over.sf.rescaled, \"pred_bm2\") #> pred_bm2  #>     1648 eSDM::model_abundance(over.sf.rescaled, \"pred_bm3\") #> pred_bm3  #>     1648  summary(over.sf.rescaled) #>     pred_bm1            var1          pred_bm2            var2    #>  Min.   :0.00001   Min.   :0e+00   Min.   :0.00003   Min.   :0    #>  1st Qu.:0.00029   1st Qu.:0e+00   1st Qu.:0.00063   1st Qu.:0    #>  Median :0.00080   Median :0e+00   Median :0.00104   Median :0    #>  Mean   :0.00148   Mean   :0e+00   Mean   :0.00147   Mean   :0    #>  3rd Qu.:0.00180   3rd Qu.:0e+00   3rd Qu.:0.00187   3rd Qu.:0    #>  Max.   :0.01970   Max.   :7e-05   Max.   :0.00645   Max.   :0    #>  NA's   :38        NA's   :38      NA's   :95        NA's   :95   #>     pred_bm3            var3                  geometry     #>  Min.   :0.00000   Min.   :0.00000   MULTIPOLYGON :11419   #>  1st Qu.:0.00020   1st Qu.:0.00000   epsg:NA      :    0   #>  Median :0.00051   Median :0.00000   +proj=cea ...:    0   #>  Mean   :0.00147   Mean   :0.00000                         #>  3rd Qu.:0.00225   3rd Qu.:0.00000                         #>  Max.   :0.01866   Max.   :0.00013                         #>  NA's   :41        NA's   :41 # Calculate ensemble weights e.weights <- list(   eSDM::evaluation_metrics(over1.sf, 1, valid.data, \"pres_abs\"),    eSDM::evaluation_metrics(over2.sf, 1, valid.data, \"pres_abs\"),    eSDM::evaluation_metrics(over3.sf, 1, valid.data, \"pres_abs\") ) #> There were 83 validation points that did not overlap with a non-NA prediction polygon #> There were 171 validation points that did not overlap with a non-NA prediction polygon #> There were 84 validation points that did not overlap with a non-NA prediction polygon  over.df.resc.var <- over.sf.rescaled %>%    dplyr::select(var1, var2, var3) %>%    st_set_geometry(NULL)  e.weights.unw <- c(1, 1, 1) / 3 e.weights.auc <- sapply(e.weights, function(i) i[1]) / sum(sapply(e.weights, function(i) i[1])) e.weights.tss <- sapply(e.weights, function(i) i[2]) / sum(sapply(e.weights, function(i) i[2])) e.weights.var <- data.frame(t(apply(   1 / over.df.resc.var, 1, function(i) {i / sum(i, na.rm = TRUE)} )))  e.weights.unw #> [1] 0.3333333 0.3333333 0.3333333 e.weights.auc #> [1] 0.3564575 0.2859788 0.3575637 e.weights.tss #> [1] 0.3897645 0.2127986 0.3974369 head(e.weights.var) #>         var1      var2        var3 #> 1 0.30739591 0.6897710 0.002833083 #> 2 0.99305706        NA 0.006942942 #> 3 0.99479068        NA 0.005209324 #> 4 0.06759370 0.3232166 0.609189722 #> 5 0.05685041 0.8348384 0.108311140 #> 6 0.04114136 0.4182598 0.540598860 ### Create ensembles  # Unweighted; calculate CV because it is used in Fig. 4 plot ens.sf.unw <- eSDM::ensemble_create(   over.sf.rescaled, c(\"pred_bm1\", \"pred_bm2\", \"pred_bm3\"),  w = e.weights.unw,    x.var.idx = NULL ) %>%    mutate(SE = sqrt(Var_ens), CV = SE / Pred_ens) %>%    dplyr::select(Pred_ens, SE, CV) %>%    st_set_agr(\"constant\")  # Weights based on AUC ens.sf.wauc <- eSDM::ensemble_create(   over.sf.rescaled, c(\"pred_bm1\", \"pred_bm2\", \"pred_bm3\"),  w = e.weights.auc,    x.var.idx = NULL ) %>%    mutate(SE = sqrt(Var_ens)) %>%    dplyr::select(Pred_ens, SE) %>%    st_set_agr(\"constant\")  # Weights based on TSS ens.sf.wtss <- eSDM::ensemble_create(   over.sf.rescaled, c(\"pred_bm1\", \"pred_bm2\", \"pred_bm3\"),  w = e.weights.tss,    x.var.idx = NULL ) %>%    mutate(SE = sqrt(Var_ens)) %>%    dplyr::select(Pred_ens, SE) %>%    st_set_agr(\"constant\")  # Weights based on the inverse of the variance ens.sf.wvar <- eSDM::ensemble_create(   over.sf.rescaled, c(\"pred_bm1\", \"pred_bm2\", \"pred_bm3\"),  w = e.weights.var,    x.var.idx = NULL ) %>%    mutate(SE = sqrt(Var_ens)) %>%    dplyr::select(Pred_ens, SE) %>%    st_set_agr(\"constant\") # Create an ensemble and calculate within-model uncertainty; code not run ens.sf.unw.wmv <- eSDM::ensemble_create(   over.sf.rescaled, c(\"pred_bm1\", \"pred_bm2\", \"pred_bm3\"),  w = e.weights.unw,   x.var.idx = c(var1, var2, var3) ) %>%   mutate(SE = sqrt(Var_ens)) %>%   dplyr::select(Pred_ens , SE) # Calculate evaluation metrics for ensembles; code not run names.2 <- c(   \"Ensemble – unweighted\", \"Ensemble – AUC-based weights\",   \"Ensemble – TSS-based weights\", \"Ensemble – variance-based weights\" )  eval.lt.ens <- data.frame(do.call(rbind, list(   eSDM::evaluation_metrics(ens.sf.unw,  \"Pred_ens\", valid.data.lt, \"pres_abs\"),    eSDM::evaluation_metrics(ens.sf.wauc, \"Pred_ens\", valid.data.lt, \"pres_abs\"),    eSDM::evaluation_metrics(ens.sf.wtss, \"Pred_ens\", valid.data.lt, \"pres_abs\"),    eSDM::evaluation_metrics(ens.sf.wvar, \"Pred_ens\", valid.data.lt, \"pres_abs\") ))) %>%   mutate(Preds = names.2) %>%   dplyr::select(Preds, AUC_LT = X1, TSS_LT = X2)  eval.hr.ens <- data.frame(do.call(rbind, list(   eSDM::evaluation_metrics(ens.sf.unw,  \"Pred_ens\", valid.data.hr, \"pres_abs\"),    eSDM::evaluation_metrics(ens.sf.wauc, \"Pred_ens\", valid.data.hr, \"pres_abs\"),    eSDM::evaluation_metrics(ens.sf.wtss, \"Pred_ens\", valid.data.hr, \"pres_abs\"),    eSDM::evaluation_metrics(ens.sf.wvar, \"Pred_ens\", valid.data.hr, \"pres_abs\") ))) %>%   mutate(Preds = names.2) %>%   dplyr::select(Preds, AUC_HR = X1, TSS_HR = X2)   eval.combo.ens <- data.frame(do.call(rbind, list(   eSDM::evaluation_metrics(ens.sf.unw,  \"Pred_ens\", valid.data, \"pres_abs\"),    eSDM::evaluation_metrics(ens.sf.wauc, \"Pred_ens\", valid.data, \"pres_abs\"),    eSDM::evaluation_metrics(ens.sf.wtss, \"Pred_ens\", valid.data, \"pres_abs\"),    eSDM::evaluation_metrics(ens.sf.wvar, \"Pred_ens\", valid.data, \"pres_abs\") ))) %>%   mutate(Preds = names.2) %>%   dplyr::select(Preds, AUC = X1, TSS = X2) read.csv(system.file(\"extdata/Table3.csv\", package = \"eSDM\")) %>%   dplyr::select(Predictions, AUC, TSS, `AUC-LT` = AUC.LT, `TSS-LT` = TSS.LT,                  `AUC-HR` = AUC.HR, `TSS-HR` = TSS.HR) %>%    knitr::kable(caption = \"Evaluation metrics\", digits = 3, align = \"lcccccc\") # Simple code to visualize ensemble created with weights based on TSS values plot_sf_3panel(   rename(ens.sf.wtss, se = SE), \"Pred_ens\", main.txt = \"Ensemble-TSS - \",    map.base = map.world, x.axis.at = c(-130, -125, -120) ) ### Figure 4; code not run library(tmap)  # Values passed to tmap_sdm - range of map range.poly <- st_sfc(   st_polygon(list(matrix(     c(-132, -132, -116, -116, -132, 29.5, 49, 49, 29.5, 29.5), ncol = 2   ))),   crs = 4326 ) rpoly.mat <- matrix(st_bbox(range.poly), ncol = 2)  # Values passed to tmap_sdm - size of text labels and legend width main.size <- 0.8 leg.size  <- 0.55 leg.width <- 0.43 grid.size <- 0.55  # Values passed to tmap_sdm - color scale info blp1 <- tmap_sdm_help(ens.sf.unw, \"Pred_ens\") blp2 <- tmap_sdm_help(ens.sf.unw, \"CV\")  # Plot of predictions (whales / km^-2) tmap.obj1 <- tmap_sdm(   ens.sf.unw, \"Pred_ens\", blp1, map.world, rpoly.mat,    \"Unweighted ensemble - predictions\",    main.size, leg.size, leg.width, grid.size ) # Plot of SE values (with same color sceme as predictions) tmap.obj2 <- tmap_sdm(   ens.sf.unw, \"SE\", blp1, map.world, rpoly.mat,    \"Unweighted ensemble - SE\",    main.size, leg.size, leg.width, grid.size ) # Plot of CV values tmap.obj3 <- tmap_sdm(   ens.sf.unw, \"CV\", blp2, map.world, rpoly.mat,    \"Unweighted ensemble - CV\",    main.size, leg.size, leg.width, grid.size )  # Generate plot tmap_arrange(   list(tmap.obj1, tmap.obj2, tmap.obj3), ncol = 3, asp = NULL, outer.margins = 0.05 ) ### Figure 5; code not run  # Values passed to tmap_sdm - size of text labels and legend width main.size <- 1.1 leg.size  <- 0.7 leg.width <- 0.6 grid.size <- 0.7  # Values passed to tmap_sdm - color scale info blp1b <- tmap_sdm_help(ens.sf.wtss, \"Pred_ens\") blp2b <- tmap_sdm_help_perc(ens.sf.wtss, \"Pred_ens\")  # Plot of predictions (whales / km^-2) tmap.obj1 <- tmap_sdm(   ens.sf.wtss, \"Pred_ens\", blp1, map.world, rpoly.mat, \"Ensemble-TSS - Predictions\",    main.size, leg.size, leg.width, grid.size ) # Plot of SE values (with same color sceme as predictions) tmap.obj2 <- tmap_sdm(   ens.sf.wtss, \"SE\", blp1, map.world, rpoly.mat, \"Ensemble-TSS - SE\",    main.size, leg.size, leg.width, grid.size ) # Plot of predictions (percentiles) tmap.obj3 <- tmap_sdm(   ens.sf.wtss, \"Pred_ens\", blp2b, map.world, rpoly.mat, \"Ensemble-TSS - Predictions\",    main.size, leg.size, leg.width, grid.size ) # Plot of predictions (percentiles) with combined validation data presence points tmap.obj4 <- tmap_sdm(   ens.sf.wtss, \"Pred_ens\", blp2b, map.world, rpoly.mat, \"Ensemble-TSS - Predictions\",    main.size, leg.size, leg.width, grid.size ) +    tm_shape(filter(valid.data, pres_abs == 1)) +    tm_dots(col = \"black\", size = 0.04, shape = 19)  # Generate plot tmap_arrange(   list(tmap.obj1, tmap.obj2, tmap.obj3, tmap.obj4), ncol = 2, nrow = 2,    asp = NULL, outer.margins = 0.05 )"},{"path":"https://smwoodman.github.io/eSDM/articles/example-analysis.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Example analysis - Woodman et al 2019","text":"Becker, E., Forney, K., Fiedler, P., Barlow, J., Chivers, S., Edwards, C., … Redfern, J. (2016). Moving towards dynamic ocean management: well modeled ocean products predict species distributions? Remote Sensing, 8, 149. https://doi.org/10.3390/rs8020149 Hazen, E.L., Palacios, D.M., Forney, K.., Howell, E.., Becker, E., Hoover, .L., … Bailey, H. (2017). WhaleWatch: dynamic management tool predicting blue whale density California Current. Journal Applied Ecology, 54, 1415-1428. https://doi.org/10.1111/1365-2664.12820 Irvine, L.M., Mate, B.R., Winsor, M.H., Palacios, D.M., Bograd, S.J., Costa, D.P. & Bailey, H. (2014). Spatial temporal occurrence blue whales U.S. West Coast, implications management. PLoS One, 9, e102959. https://doi.org/10.1371/journal.pone.0109485 Redfern, J.V., Moore, T.J., Fiedler, P.C., de Vos, ., Brownell, R.L., Forney, K.., … Heikkinen, R. (2017). Predicting cetacean distributions data-poor marine ecosystems. Diversity Distributions, 23, 394-408. https://doi.org/10.1111/ddi.12537 Woodman, S.M., Forney, K.., Becker, E.., DeAngelis, M.L., Hazen, E.L., Palacios, D.M., Redfern, J.V. (2019). eSDM: tool creating exploring ensembles predictions species distribution abundance models. Methods Ecology Evolution. 2019;10:1923-1933. https://doi.org/10.1111/2041-210X.13283","code":""},{"path":"https://smwoodman.github.io/eSDM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sam Woodman. Author, maintainer.","code":""},{"path":"https://smwoodman.github.io/eSDM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Woodman, S.M., Forney, K.., Becker, E.., DeAngelis, M.L., Hazen, E.L., Palacios, D.M., Redfern, J.V. (2019). eSDM: tool creating exploring ensembles predictions species distribution abundance models. Methods Ecol Evol. 2019;10:1923-1933. doi:10.1111/2041-210X.13283","code":"@Article{,   title = {eSDM: A tool for creating and exploring ensembles of predictions from species distribution and abundance models},   year = {2019},   author = {Samuel M. Woodman and Karin A. Forney and Elizabeth A. Becker and Monica L. DeAngelis and Elliott L. Hazen and Daniel M. Palacios and Jessica V. Redfern},   journal = {Methods Ecol Evol},   doi = {10.1111/2041-210X.13283},   url = {https://doi.org/10.1111/2041-210X.13283}, }"},{"path":"https://smwoodman.github.io/eSDM/index.html","id":"esdm","dir":"","previous_headings":"","what":"Ensemble Tool for Predictions from Species Distribution Models","title":"Ensemble Tool for Predictions from Species Distribution Models","text":"eSDM R package designed allow users create ensembles predictions species distribution models (SDMs) made different spatial scales different prediction units. Included package eSDM GUI, R Shiny tool provides user graphical user interface can use import, overlay, create ensembles SDM predictions.","code":""},{"path":"https://smwoodman.github.io/eSDM/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Ensemble Tool for Predictions from Species Distribution Models","text":"can install released version eSDM CRAN : install latest version GitHub:","code":"install.packages('eSDM') # install.packages('devtools') devtools::install_github('smwoodman/eSDM', build_vignettes = TRUE)"},{"path":"https://smwoodman.github.io/eSDM/index.html","id":"esdm-gui","dir":"","previous_headings":"","what":"eSDM GUI","title":"Ensemble Tool for Predictions from Species Distribution Models","text":"can access GUI online https://swoodman.shinyapps.io/eSDM/. need R RStudio installed access GUI online. run GUI locally: install eSDM described , run following code RStudio console: Depending internet connection, running GUI locally may faster running online. text images overlap within GUI, please make browser window full screen adjust text size browser (e.g., Ctrl - minus (‘-’) Windows systems)","code":"eSDM::eSDM_GUI()"},{"path":"https://smwoodman.github.io/eSDM/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Ensemble Tool for Predictions from Species Distribution Models","text":"","code":"# To see the list of available vignettes browseVignettes(\"eSDM\")   # To open a specific vignette vignette(\"example-analysis\")"},{"path":"https://smwoodman.github.io/eSDM/index.html","id":"manuscript-reference","dir":"","previous_headings":"","what":"Manuscript reference","title":"Ensemble Tool for Predictions from Species Distribution Models","text":"paper can obtained , cited (preferred): Woodman, S.M., Forney, K.., Becker, E.., DeAngelis, M.L., Hazen, E.L., Palacios, D.M., Redfern, J.V. (2019). eSDM: tool creating exploring ensembles predictions species distribution abundance models. Methods Ecol Evol. 2019;10:1923-1933. doi:10.1111/2041-210X.13283 data used example analysis, see https://github.com/smwoodman/eSDM-data code used create applicable figures manuscript: Figure 2, Figure 3, Figure 4, Figure 5","code":""},{"path":"https://smwoodman.github.io/eSDM/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"Ensemble Tool for Predictions from Species Distribution Models","text":"repository scientific product official communication National Oceanic Atmospheric Administration, United States Department Commerce. NOAA GitHub project code provided ‘’ basis user assumes responsibility use. claims Department Commerce Department Commerce bureaus stemming use GitHub project governed applicable Federal law. reference specific commercial products, processes, services service mark, trademark, manufacturer, otherwise, constitute imply endorsement, recommendation favoring Department Commerce. Department Commerce seal logo, seal logo DOC bureau, shall used manner imply endorsement commercial product activity DOC United States Government.","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/eSDM-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensemble tool for predictions from Species Distribution Models — eSDM-package","title":"Ensemble tool for predictions from Species Distribution Models — eSDM-package","text":"eSDM: tool creating exploring ensembles predictions Species Distribution Models","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/eSDM-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ensemble tool for predictions from Species Distribution Models — eSDM-package","text":"eSDM provides functionality overlaying SDM predictions onto single base geometry   creating evaluating ensemble predictions.   can done manually R, using eSDM GUI (R Shiny app) opened eSDM_GUI eSDM allows users overlay SDM predictions onto single base geometry,   create ensembles predictions via weighted unweighted averages,   calculate performance metrics set predictions resulting ensembles,   visually compare ensemble predictions original predictions.   information provided tool can assist users understanding spatial uncertainties   making informed conservation decisions. GUI ensures tool accessible non-R users,   also providing user-friendly environment functionality   loading polygons use visualizing predictions.   However, user choices restricted workflow provided GUI.","code":""},{"path":[]},{"path":"https://smwoodman.github.io/eSDM/reference/eSDM-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ensemble tool for predictions from Species Distribution Models — eSDM-package","text":"Sam Woodman sam.woodman@noaa.gov","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/eSDM_GUI.html","id":null,"dir":"Reference","previous_headings":"","what":"Open the eSDM GUI — eSDM_GUI","title":"Open the eSDM GUI — eSDM_GUI","text":"Open eSDM graphical user interface (GUI);   R Shiny app creating ensemble predictions using SDM predictions.","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/eSDM_GUI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open the eSDM GUI — eSDM_GUI","text":"","code":"eSDM_GUI(launch.browser = TRUE)"},{"path":"https://smwoodman.github.io/eSDM/reference/eSDM_GUI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open the eSDM GUI — eSDM_GUI","text":"launch.browser Logical default TRUE; passed launch.browser argument runApp","code":""},{"path":[]},{"path":"https://smwoodman.github.io/eSDM/reference/ensemble_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ensemble of SDM predictions — ensemble_create","title":"Create ensemble of SDM predictions — ensemble_create","text":"Create weighted unweighted ensemble SDM predictions, including associated uncertainty values","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/ensemble_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ensemble of SDM predictions — ensemble_create","text":"","code":"ensemble_create(x, x.idx, w = NULL, x.var.idx = NULL, ...)  # S3 method for sf ensemble_create(x, x.idx, w = NULL, x.var.idx = NULL, ...)  # S3 method for data.frame ensemble_create(x, x.idx, w = NULL, x.var.idx = NULL, ...)"},{"path":"https://smwoodman.github.io/eSDM/reference/ensemble_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ensemble of SDM predictions — ensemble_create","text":"x object class sf class data.frame x.idx vector column names numerical indices; indicates columns x used create ensemble w weights ensemble; either numeric vector length x data frame (tibble) number rows x ncol(w) == length(x.idx). w numeric vector, values (.e. weights) must sum 1. default value 1 / length(x.idx), .e. unweighted ensemble x.var.idx vector column names column indices; indicates columns x variance values calculate uncertainty values ensemble. x.var.idx specified, must length x.idx. Use x.var.idx = NULL (default) none predictions associated uncertainty values; case uncertainty values ensemble calculated using among-model uncertainty. See 'Details' section information ... Arguments passed methods; specifically designed passing na.rm argument sum","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/ensemble_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create ensemble of SDM predictions — ensemble_create","text":"object class x two columns appended data frame: 'Pred_ens' - ensemble predictions 'Var_ens' - variance ensemble predictions,       calculated using either within-model uncertainty (x.var.idx specified)       among-model uncertainty (x.var.idx NULL) Note columns x included returned object.   Also, x class sf   1) geometry list-column last column returned object   2) agr attribute set 'constant' 'Pred_ens' 'Var_ens'","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/ensemble_create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create ensemble of SDM predictions — ensemble_create","text":"ensemble_create designed used overlaying predictions overlay_sdm   (desired) rescaling overlaid predictions ensemble_rescale. function implements ensemble methods provided eSDM_GUI.   Note implement regional exclusion, must done manually using GUI. Ensemble uncertainty calculated using either within-model uncertainty (x.var.idx specified)   among-model uncertainty (x.var.idx NULL).   See eSDM GUI manual applicable formulas.","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/ensemble_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create ensemble of SDM predictions — ensemble_create","text":"","code":"ensemble_create(preds.1, c(\"Density\", \"Density2\"), c(0.2, 0.8)) #> Simple feature collection with 325 features and 6 fields #> Attribute-geometry relationship: 6 constant, 0 aggregate, 0 identity #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -123 ymin: 32 xmax: -117 ymax: 35 #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> Geodetic CRS:  WGS 84 #> First 10 features: #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #>       Density   Density2         Var1         Var2   Pred_ens      Var_ens #> 1  0.18149697 0.28017854 0.0006178977 6.782811e-03 0.26044222 1.558088e-03 #> 2  0.02813584 0.38707710 0.0041072496 7.100138e-03 0.31528885 2.061421e-02 #> 3  0.06602004 0.18568142 0.0060756461 2.152463e-03 0.16174914 2.291015e-03 #> 4  0.02904423 0.93583648 0.0030639979 7.415022e-03 0.75447803 1.315635e-01 #> 5  0.03662517 0.01805658 0.0009543514 2.318842e-03 0.02177030 5.516681e-05 #> 6  0.04675287 0.60902020 0.0081108828 1.309096e-05 0.49656674 5.058313e-02 #> 7  0.02349130 0.71603927 0.0068363941 2.566385e-04 0.57752967 7.673963e-02 #> 8  0.02890871 0.93743528 0.0047392882 7.242310e-03 0.75572996 1.320673e-01 #> 9  0.04262853 0.05042882 0.0038668358 5.157556e-03 0.04886876 9.735136e-06 #> 10 0.14753231 0.65324162 0.0071928494 7.077782e-03 0.55209976 4.091871e-02 #>                          geometry #> 1  POLYGON ((-122.875 32.125, ... #> 2  POLYGON ((-122.625 32.125, ... #> 3  POLYGON ((-122.375 32.125, ... #> 4  POLYGON ((-122.125 32.125, ... #> 5  POLYGON ((-121.875 32.125, ... #> 6  POLYGON ((-121.625 32.125, ... #> 7  POLYGON ((-121.375 32.125, ... #> 8  POLYGON ((-121.125 32.125, ... #> 9  POLYGON ((-120.875 32.125, ... #> 10 POLYGON ((-120.625 32.125, ... ensemble_create(preds.1, 1:2, c(0.2, 0.8), c(\"Var1\", \"Var2\")) #> Simple feature collection with 325 features and 6 fields #> Attribute-geometry relationship: 6 constant, 0 aggregate, 0 identity #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -123 ymin: 32 xmax: -117 ymax: 35 #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> Geodetic CRS:  WGS 84 #> First 10 features: #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #>       Density   Density2         Var1         Var2   Pred_ens      Var_ens #> 1  0.18149697 0.28017854 0.0006178977 6.782811e-03 0.26044222 0.0043657149 #> 2  0.02813584 0.38707710 0.0041072496 7.100138e-03 0.31528885 0.0047083781 #> 3  0.06602004 0.18568142 0.0060756461 2.152463e-03 0.16174914 0.0016206025 #> 4  0.02904423 0.93583648 0.0030639979 7.415022e-03 0.75447803 0.0048681740 #> 5  0.03662517 0.01805658 0.0009543514 2.318842e-03 0.02177030 0.0015222329 #> 6  0.04675287 0.60902020 0.0081108828 1.309096e-05 0.49656674 0.0003328135 #> 7  0.02349130 0.71603927 0.0068363941 2.566385e-04 0.57752967 0.0004377044 #> 8  0.02890871 0.93743528 0.0047392882 7.242310e-03 0.75572996 0.0048246499 #> 9  0.04262853 0.05042882 0.0038668358 5.157556e-03 0.04886876 0.0034555096 #> 10 0.14753231 0.65324162 0.0071928494 7.077782e-03 0.55209976 0.0048174942 #>                          geometry #> 1  POLYGON ((-122.875 32.125, ... #> 2  POLYGON ((-122.625 32.125, ... #> 3  POLYGON ((-122.375 32.125, ... #> 4  POLYGON ((-122.125 32.125, ... #> 5  POLYGON ((-121.875 32.125, ... #> 6  POLYGON ((-121.625 32.125, ... #> 7  POLYGON ((-121.375 32.125, ... #> 8  POLYGON ((-121.125 32.125, ... #> 9  POLYGON ((-120.875 32.125, ... #> 10 POLYGON ((-120.625 32.125, ... ensemble_create(data.frame(a = 1:5, b = 3:7), c(1, 2)) #>   a b Pred_ens Var_ens #> 1 1 3        2       1 #> 2 2 4        3       1 #> 3 3 5        4       1 #> 4 4 6        5       1 #> 5 5 7        6       1  weights.df <- data.frame(runif(325), c(rep(NA, 100), runif(225))) ensemble_create(preds.1, c(\"Density\", \"Density2\"), weights.df, na.rm = TRUE) #> Simple feature collection with 325 features and 6 fields #> Attribute-geometry relationship: 6 constant, 0 aggregate, 0 identity #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -123 ymin: 32 xmax: -117 ymax: 35 #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> Geodetic CRS:  WGS 84 #> First 10 features: #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #>       Density   Density2         Var1         Var2   Pred_ens Var_ens #> 1  0.18149697 0.28017854 0.0006178977 6.782811e-03 0.18149697       0 #> 2  0.02813584 0.38707710 0.0041072496 7.100138e-03 0.02813584       0 #> 3  0.06602004 0.18568142 0.0060756461 2.152463e-03 0.06602004       0 #> 4  0.02904423 0.93583648 0.0030639979 7.415022e-03 0.02904423       0 #> 5  0.03662517 0.01805658 0.0009543514 2.318842e-03 0.03662517       0 #> 6  0.04675287 0.60902020 0.0081108828 1.309096e-05 0.04675287       0 #> 7  0.02349130 0.71603927 0.0068363941 2.566385e-04 0.02349130       0 #> 8  0.02890871 0.93743528 0.0047392882 7.242310e-03 0.02890871       0 #> 9  0.04262853 0.05042882 0.0038668358 5.157556e-03 0.04262853       0 #> 10 0.14753231 0.65324162 0.0071928494 7.077782e-03 0.14753231       0 #>                          geometry #> 1  POLYGON ((-122.875 32.125, ... #> 2  POLYGON ((-122.625 32.125, ... #> 3  POLYGON ((-122.375 32.125, ... #> 4  POLYGON ((-122.125 32.125, ... #> 5  POLYGON ((-121.875 32.125, ... #> 6  POLYGON ((-121.625 32.125, ... #> 7  POLYGON ((-121.375 32.125, ... #> 8  POLYGON ((-121.125 32.125, ... #> 9  POLYGON ((-120.875 32.125, ... #> 10 POLYGON ((-120.625 32.125, ..."},{"path":"https://smwoodman.github.io/eSDM/reference/ensemble_rescale.html","id":null,"dir":"Reference","previous_headings":"","what":"Rescale SDM predictions — ensemble_rescale","title":"Rescale SDM predictions — ensemble_rescale","text":"Rescale SDM predictions (applicable) associated uncertainties","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/ensemble_rescale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rescale SDM predictions — ensemble_rescale","text":"","code":"ensemble_rescale(x, x.idx, y, y.abund = NULL, x.var.idx = NULL)"},{"path":"https://smwoodman.github.io/eSDM/reference/ensemble_rescale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rescale SDM predictions — ensemble_rescale","text":"x object class sf x.idx vector column names column indices; indicates columns x prediction values rescaled y rescaling method; must either \"abundance\" \"sumto1\". See 'Details' section descriptions rescaling methods y.abund numeric value; ignored y \"abundance\" x.var.idx vector column names column indices; indicates columns x variance values rescaled. x.var.idx specified, must length x.idx. Use x.var.idx = NULL (default) none predictions associated uncertainty values; see 'Details' section information","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/ensemble_rescale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rescale SDM predictions — ensemble_rescale","text":"sf object x columns specified x.idx x.var.idx rescaled.   agr attributes x conserved","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/ensemble_rescale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rescale SDM predictions — ensemble_rescale","text":"ensemble_rescale intended used overlaying predictions   overlay_sdm creating ensembles ensemble_create.   provided rescaling methods : 'abundance' - Rescale density values predicted abundance y.abund 'sumto1' - Rescale density values sum 1 SDM uncertainty values must rescaled differently prediction values.   Columns specified x.var.idx must contain variance values.   values rescaled using formula var(c * x) = c^2 * var(x),   c rescaling factor associated predictions. x.var.idx NULL, function assumes   x.var.idx[1] contains variance values associated predictions x.idx[1],   x.var.idx[2] contains variance values associated predictions x.idx[2], etc.   Use NA x.var.idx indicate set predictions   associated uncertainty values (e.g., x.var.idx = c(4, NA, 5))","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/ensemble_rescale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rescale SDM predictions — ensemble_rescale","text":"","code":"ensemble_rescale(preds.1, c(\"Density\", \"Density2\"), \"abundance\", 50) #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> Simple feature collection with 325 features and 4 fields #> Attribute-geometry relationship: 4 constant, 0 aggregate, 0 identity #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -123 ymin: 32 xmax: -117 ymax: 35 #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> Geodetic CRS:  WGS 84 #> First 10 features: #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #>         Density     Density2         Var1         Var2 #> 1  7.974472e-05 1.529132e-04 0.0006178977 6.782811e-03 #> 2  1.236210e-05 2.112553e-04 0.0041072496 7.100138e-03 #> 3  2.900737e-05 1.013395e-04 0.0060756461 2.152463e-03 #> 4  1.276122e-05 5.107520e-04 0.0030639979 7.415022e-03 #> 5  1.609208e-05 9.854752e-06 0.0009543514 2.318842e-03 #> 6  2.054191e-05 3.323853e-04 0.0081108828 1.309096e-05 #> 7  1.032142e-05 3.907932e-04 0.0068363941 2.566385e-04 #> 8  1.270168e-05 5.116246e-04 0.0047392882 7.242310e-03 #> 9  1.872979e-05 2.752257e-05 0.0038668358 5.157556e-03 #> 10 6.482159e-05 3.565201e-04 0.0071928494 7.077782e-03 #>                          geometry #> 1  POLYGON ((-122.875 32.125, ... #> 2  POLYGON ((-122.625 32.125, ... #> 3  POLYGON ((-122.375 32.125, ... #> 4  POLYGON ((-122.125 32.125, ... #> 5  POLYGON ((-121.875 32.125, ... #> 6  POLYGON ((-121.625 32.125, ... #> 7  POLYGON ((-121.375 32.125, ... #> 8  POLYGON ((-121.125 32.125, ... #> 9  POLYGON ((-120.875 32.125, ... #> 10 POLYGON ((-120.625 32.125, ... ensemble_rescale(preds.1, c(1, 2), \"sumto1\") #> Simple feature collection with 325 features and 4 fields #> Attribute-geometry relationship: 4 constant, 0 aggregate, 0 identity #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -123 ymin: 32 xmax: -117 ymax: 35 #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> Geodetic CRS:  WGS 84 #> First 10 features: #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #>         Density     Density2         Var1         Var2 #> 1  0.0009493594 0.0017608119 0.0006178977 6.782811e-03 #> 2  0.0001471706 0.0024326274 0.0041072496 7.100138e-03 #> 3  0.0003453322 0.0011669347 0.0060756461 2.152463e-03 #> 4  0.0001519221 0.0058813643 0.0030639979 7.415022e-03 #> 5  0.0001915759 0.0001134785 0.0009543514 2.318842e-03 #> 6  0.0002445511 0.0038274525 0.0081108828 1.309096e-05 #> 7  0.0001228764 0.0045000253 0.0068363941 2.566385e-04 #> 8  0.0001512133 0.0058914121 0.0047392882 7.242310e-03 #> 9  0.0002229778 0.0003169253 0.0038668358 5.157556e-03 #> 10 0.0007716998 0.0041053668 0.0071928494 7.077782e-03 #>                          geometry #> 1  POLYGON ((-122.875 32.125, ... #> 2  POLYGON ((-122.625 32.125, ... #> 3  POLYGON ((-122.375 32.125, ... #> 4  POLYGON ((-122.125 32.125, ... #> 5  POLYGON ((-121.875 32.125, ... #> 6  POLYGON ((-121.625 32.125, ... #> 7  POLYGON ((-121.375 32.125, ... #> 8  POLYGON ((-121.125 32.125, ... #> 9  POLYGON ((-120.875 32.125, ... #> 10 POLYGON ((-120.625 32.125, ...  ensemble_rescale(   preds.1, c(\"Density\", \"Density2\"), \"abundance\", 100, c(3,4) ) #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> Simple feature collection with 325 features and 4 fields #> Attribute-geometry relationship: 4 constant, 0 aggregate, 0 identity #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -123 ymin: 32 xmax: -117 ymax: 35 #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> Geodetic CRS:  WGS 84 #> First 10 features: #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #>         Density     Density2         Var1         Var2 #> 1  1.594894e-04 3.058264e-04 4.771354e-10 8.081463e-09 #> 2  2.472421e-05 4.225106e-04 3.171583e-09 8.459546e-09 #> 3  5.801473e-05 2.026789e-04 4.691563e-09 2.564579e-09 #> 4  2.552245e-05 1.021504e-03 2.365993e-09 8.834719e-09 #> 5  3.218416e-05 1.970950e-05 7.369421e-10 2.762813e-09 #> 6  4.108382e-05 6.647706e-04 6.263155e-09 1.559739e-11 #> 7  2.064285e-05 7.815864e-04 5.279006e-09 3.057751e-10 #> 8  2.540336e-05 1.023249e-03 3.659638e-09 8.628939e-09 #> 9  3.745958e-05 5.504514e-05 2.985938e-09 6.145034e-09 #> 10 1.296432e-04 7.130402e-04 5.554258e-09 8.432909e-09 #>                          geometry #> 1  POLYGON ((-122.875 32.125, ... #> 2  POLYGON ((-122.625 32.125, ... #> 3  POLYGON ((-122.375 32.125, ... #> 4  POLYGON ((-122.125 32.125, ... #> 5  POLYGON ((-121.875 32.125, ... #> 6  POLYGON ((-121.625 32.125, ... #> 7  POLYGON ((-121.375 32.125, ... #> 8  POLYGON ((-121.125 32.125, ... #> 9  POLYGON ((-120.875 32.125, ... #> 10 POLYGON ((-120.625 32.125, ..."},{"path":"https://smwoodman.github.io/eSDM/reference/evaluation_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate SDM evaluation metrics — evaluation_metrics","title":"Calculate SDM evaluation metrics — evaluation_metrics","text":"Calculate AUC, TSS, RMSE given density predictions validation data","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/evaluation_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate SDM evaluation metrics — evaluation_metrics","text":"","code":"evaluation_metrics(x, x.idx, y, y.idx, count.flag = FALSE)"},{"path":"https://smwoodman.github.io/eSDM/reference/evaluation_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate SDM evaluation metrics — evaluation_metrics","text":"x object class sf; SDM predictions x.idx name index column x prediction values y object class sf; validation data y.idx name index column y validation data. validation data column must least two unique values, e.g. 0 1 count.flag logical; TRUE indicates data column y.idx count data, FALSE indicates data presence/absence. See details differences data processing based flag.","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/evaluation_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate SDM evaluation metrics — evaluation_metrics","text":"numeric vector AUC, TSS RMSE values, respectively.   count.flag == FALSE, RMSE value NA","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/evaluation_metrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate SDM evaluation metrics — evaluation_metrics","text":"count.flag == TRUE, eSDM::model_abundance(x, x.idx, FALSE) run   calculate predicted abundance thus calculate RMSE.   Note assumes data column x.idx x density values. count.flag == FALSE, values column y.idx y must 0 1. rows x value NA column x.idx   rows y value NA column y.idx removed calculating metrics","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/evaluation_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate SDM evaluation metrics — evaluation_metrics","text":"","code":"evaluation_metrics(preds.1, 2, validation.data, \"sight\") #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> [1] 0.6000000 0.4666667        NA  evaluation_metrics(preds.1, \"Density2\", validation.data, \"count\", TRUE) #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> [1]   0.6000000   0.4666667 275.8528842"},{"path":"https://smwoodman.github.io/eSDM/reference/gshhg.l.L16.html","id":null,"dir":"Reference","previous_headings":"","what":"Low resolution GSHHG world map — gshhg.l.L16","title":"Low resolution GSHHG world map — gshhg.l.L16","text":"Low resolution GSHHG world map, includes hierarchical levels   L1 L6. Processed using st_make_valid","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/gshhg.l.L16.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Low resolution GSHHG world map — gshhg.l.L16","text":"","code":"gshhg.l.L16"},{"path":"https://smwoodman.github.io/eSDM/reference/gshhg.l.L16.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Low resolution GSHHG world map — gshhg.l.L16","text":"object class sfc","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/gshhg.l.L16.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Low resolution GSHHG world map — gshhg.l.L16","text":"http://www.soest.hawaii.edu/pwessel/gshhg/","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/model_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate predicted abundance — model_abundance","title":"Calculate predicted abundance — model_abundance","text":"Calculates predicted abundance multiplying density prediction values prediction polygon areas","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/model_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate predicted abundance — model_abundance","text":"","code":"model_abundance(x, dens.idx, sum.abund = TRUE)"},{"path":"https://smwoodman.github.io/eSDM/reference/model_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate predicted abundance — model_abundance","text":"x object class sf; SDM density predictions. Must valid crs code dens.idx name index column(s) x density predictions. Can character vector (column names) numeric vector (column indices) sum.abund logical; whether sum predicted abundances","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/model_abundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate predicted abundance — model_abundance","text":"sum.abund == TRUE, vector length dens.idx  representing predicted abundance density values column.   sum.abund == FALSE length dens.idx 1,   numeric vector predicted abundance prediction polygon x.   sum.abund == FALSE length dens.idx greater 1,   data frame length(dens.idx) columns predicted abundance prediction polygons","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/model_abundance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate predicted abundance — model_abundance","text":"Multiplies values specified column(s) (.e. density predictions)   area square kilometers corresponding prediction polygon.   area prediction polygon calculated using st_area geos_measures.   x must valid crs code calculate area abundance calculations.","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/model_abundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate predicted abundance — model_abundance","text":"","code":"model_abundance(preds.1, \"Density\") #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #>  Density  #> 113798.7  model_abundance(preds.1, c(1, 1)) #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> [1] 113798.7 113798.7 model_abundance(preds.1, c(1, 1), FALSE) #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #>         1.abund     1.abund #> 1     29.715617   29.715617 #> 2      9.213089    9.213089 #> 3     21.618285   21.618285 #> 4      9.510542    9.510542 #> 5     11.992925   11.992925 #> 6     15.309244   15.309244 #> 7      7.692235    7.692235 #> 8      9.466167    9.466167 #> 9     13.958726   13.958726 #> 10    48.309506   48.309506 #> 11    81.283063   81.283063 #> 12    37.782909   37.782909 #> 13    21.123915   21.123915 #> 14    29.372347   29.372347 #> 15   308.682325  308.682325 #> 16   511.227249  511.227249 #> 17   558.302197  558.302197 #> 18   654.233399  654.233399 #> 19   438.531888  438.531888 #> 20   142.804115  142.804115 #> 21   393.110499  393.110499 #> 22   496.567451  496.567451 #> 23   639.749943  639.749943 #> 24   670.310612  670.310612 #> 25   251.498152  251.498152 #> 26    49.120715   49.120715 #> 27    51.353557   51.353557 #> 28    21.130448   21.130448 #> 29    18.536482   18.536482 #> 30    14.267988   14.267988 #> 31    14.665388   14.665388 #> 32    33.444843   33.444843 #> 33    25.682155   25.682155 #> 34    59.543802   59.543802 #> 35   102.139409  102.139409 #> 36   162.003138  162.003138 #> 37    31.567839   31.567839 #> 38    60.792942   60.792942 #> 39   440.005881  440.005881 #> 40   978.828473  978.828473 #> 41   970.317661  970.317661 #> 42   959.576708  959.576708 #> 43  1076.442113 1076.442113 #> 44   526.980160  526.980160 #> 45   492.093378  492.093378 #> 46   500.778242  500.778242 #> 47  1178.278788 1178.278788 #> 48  1266.595181 1266.595181 #> 49   831.628443  831.628443 #> 50   724.295329  724.295329 #> 51    48.423352   48.423352 #> 52    22.295281   22.295281 #> 53    13.507420   13.507420 #> 54    13.379502   13.379502 #> 55     7.992948    7.992948 #> 56    13.302392   13.302392 #> 57     4.609331    4.609331 #> 58    42.006974   42.006974 #> 59    53.911134   53.911134 #> 60   134.721655  134.721655 #> 61   278.000058  278.000058 #> 62    62.138648   62.138648 #> 63   767.120262  767.120262 #> 64  1022.332185 1022.332185 #> 65  1099.977261 1099.977261 #> 66  1319.306666 1319.306666 #> 67  1264.580888 1264.580888 #> 68  1025.781614 1025.781614 #> 69  1074.996881 1074.996881 #> 70   568.203313  568.203313 #> 71   463.107393  463.107393 #> 72   846.578824  846.578824 #> 73  1007.831360 1007.831360 #> 74  1395.035148 1395.035148 #> 75           NA          NA #> 76    49.212468   49.212468 #> 77    14.911804   14.911804 #> 78     5.148820    5.148820 #> 79     4.751022    4.751022 #> 80    16.470810   16.470810 #> 81    22.149293   22.149293 #> 82     6.200892    6.200892 #> 83    63.827365   63.827365 #> 84   183.396771  183.396771 #> 85   333.697073  333.697073 #> 86    75.974646   75.974646 #> 87   660.710544  660.710544 #> 88  1137.094612 1137.094612 #> 89  1257.932145 1257.932145 #> 90  1177.211844 1177.211844 #> 91  1373.445558 1373.445558 #> 92  1051.430914 1051.430914 #> 93  1099.757383 1099.757383 #> 94   619.586870  619.586870 #> 95   644.800174  644.800174 #> 96  1021.594018 1021.594018 #> 97  1004.579364 1004.579364 #> 98  1199.583989 1199.583989 #> 99           NA          NA #> 100          NA          NA #> 101  100.022644  100.022644 #> 102   20.635956   20.635956 #> 103    2.824256    2.824256 #> 104    2.987275    2.987275 #> 105    8.516881    8.516881 #> 106   28.702889   28.702889 #> 107   68.487057   68.487057 #> 108  160.860509  160.860509 #> 109   49.637587   49.637587 #> 110  232.696212  232.696212 #> 111  351.478354  351.478354 #> 112 1373.818991 1373.818991 #> 113 1253.029767 1253.029767 #> 114  993.052475  993.052475 #> 115 1105.857212 1105.857212 #> 116  835.864881  835.864881 #> 117 1208.419795 1208.419795 #> 118  800.214380  800.214380 #> 119  601.473113  601.473113 #> 120 1132.563715 1132.563715 #> 121 1252.130124 1252.130124 #> 122 1364.994320 1364.994320 #> 123 1338.141997 1338.141997 #> 124          NA          NA #> 125          NA          NA #> 126   93.047002   93.047002 #> 127   31.513009   31.513009 #> 128    1.278419    1.278419 #> 129    1.442568    1.442568 #> 130   11.104454   11.104454 #> 131   58.667886   58.667886 #> 132  125.421544  125.421544 #> 133   76.570231   76.570231 #> 134  106.446194  106.446194 #> 135  196.353341  196.353341 #> 136 1026.383055 1026.383055 #> 137 1202.606515 1202.606515 #> 138 1066.236304 1066.236304 #> 139 1053.705248 1053.705248 #> 140          NA          NA #> 141  625.572900  625.572900 #> 142  794.363420  794.363420 #> 143 1136.983703 1136.983703 #> 144 1055.066502 1055.066502 #> 145 1198.866303 1198.866303 #> 146 1423.354324 1423.354324 #> 147 1412.950043 1412.950043 #> 148 1287.174988 1287.174988 #> 149          NA          NA #> 150          NA          NA #> 151   73.927147   73.927147 #> 152   40.608258   40.608258 #> 153    3.911921    3.911921 #> 154    4.826559    4.826559 #> 155   29.511036   29.511036 #> 156   29.090951   29.090951 #> 157   79.000370   79.000370 #> 158  184.715596  184.715596 #> 159  149.972945  149.972945 #> 160  220.692526  220.692526 #> 161 1278.343687 1278.343687 #> 162  862.485401  862.485401 #> 163  668.024648  668.024648 #> 164  703.981623  703.981623 #> 165  538.206654  538.206654 #> 166  807.861409  807.861409 #> 167 1129.229716 1129.229716 #> 168 1213.738385 1213.738385 #> 169 1323.688759 1323.688759 #> 170 1388.788602 1388.788602 #> 171 1429.053497 1429.053497 #> 172          NA          NA #> 173          NA          NA #> 174          NA          NA #> 175          NA          NA #> 176  118.826124  118.826124 #> 177   18.126000   18.126000 #> 178   15.503924   15.503924 #> 179   14.565953   14.565953 #> 180   35.863013   35.863013 #> 181  110.352073  110.352073 #> 182  124.998841  124.998841 #> 183   28.674313   28.674313 #> 184   31.210789   31.210789 #> 185   92.093086   92.093086 #> 186  259.011161  259.011161 #> 187  684.888184  684.888184 #> 188  993.540657  993.540657 #> 189  639.701251  639.701251 #> 190  658.528890  658.528890 #> 191 1065.183102 1065.183102 #> 192 1277.160231 1277.160231 #> 193 1361.309875 1361.309875 #> 194 1182.433710 1182.433710 #> 195          NA          NA #> 196          NA          NA #> 197          NA          NA #> 198          NA          NA #> 199          NA          NA #> 200          NA          NA #> 201  123.686541  123.686541 #> 202  145.158254  145.158254 #> 203   48.059915   48.059915 #> 204   60.376694   60.376694 #> 205   81.531444   81.531444 #> 206  108.482756  108.482756 #> 207   63.794913   63.794913 #> 208   20.424917   20.424917 #> 209   33.365174   33.365174 #> 210   88.599356   88.599356 #> 211  299.001466  299.001466 #> 212          NA          NA #> 213 1399.331236 1399.331236 #> 214          NA          NA #> 215 1201.343099 1201.343099 #> 216 1146.204760 1146.204760 #> 217  900.185848  900.185848 #> 218  739.162367  739.162367 #> 219 1332.832473 1332.832473 #> 220          NA          NA #> 221          NA          NA #> 222          NA          NA #> 223          NA          NA #> 224          NA          NA #> 225          NA          NA #> 226  148.446042  148.446042 #> 227  277.553154  277.553154 #> 228   97.285115   97.285115 #> 229   90.077503   90.077503 #> 230  139.699024  139.699024 #> 231  102.850340  102.850340 #> 232   18.272389   18.272389 #> 233   44.728180   44.728180 #> 234   92.015905   92.015905 #> 235  579.437580  579.437580 #> 236  829.655848  829.655848 #> 237 1192.986975 1192.986975 #> 238 1302.456927 1302.456927 #> 239 1383.676632 1383.676632 #> 240 1399.189922 1399.189922 #> 241          NA          NA #> 242          NA          NA #> 243          NA          NA #> 244          NA          NA #> 245          NA          NA #> 246          NA          NA #> 247          NA          NA #> 248          NA          NA #> 249          NA          NA #> 250          NA          NA #> 251  219.868673  219.868673 #> 252  253.205760  253.205760 #> 253  161.427434  161.427434 #> 254  233.535451  233.535451 #> 255  164.052272  164.052272 #> 256   30.900163   30.900163 #> 257   83.103166   83.103166 #> 258  108.881843  108.881843 #> 259  229.842418  229.842418 #> 260  356.776908  356.776908 #> 261          NA          NA #> 262          NA          NA #> 263          NA          NA #> 264          NA          NA #> 265          NA          NA #> 266          NA          NA #> 267          NA          NA #> 268          NA          NA #> 269          NA          NA #> 270          NA          NA #> 271          NA          NA #> 272          NA          NA #> 273          NA          NA #> 274          NA          NA #> 275          NA          NA #> 276  221.746544  221.746544 #> 277  332.734815  332.734815 #> 278  213.490583  213.490583 #> 279  243.151612  243.151612 #> 280   63.738572   63.738572 #> 281  147.348113  147.348113 #> 282  700.197309  700.197309 #> 283  972.696869  972.696869 #> 284  534.312367  534.312367 #> 285  632.582664  632.582664 #> 286          NA          NA #> 287          NA          NA #> 288          NA          NA #> 289          NA          NA #> 290          NA          NA #> 291          NA          NA #> 292          NA          NA #> 293          NA          NA #> 294          NA          NA #> 295          NA          NA #> 296          NA          NA #> 297          NA          NA #> 298          NA          NA #> 299          NA          NA #> 300          NA          NA #> 301   95.561780   95.561780 #> 302  126.699175  126.699175 #> 303   52.809529   52.809529 #> 304   41.876884   41.876884 #> 305    9.223000    9.223000 #> 306  120.776751  120.776751 #> 307  241.916685  241.916685 #> 308  477.663640  477.663640 #> 309  307.556457  307.556457 #> 310  214.001827  214.001827 #> 311          NA          NA #> 312          NA          NA #> 313          NA          NA #> 314          NA          NA #> 315          NA          NA #> 316          NA          NA #> 317          NA          NA #> 318          NA          NA #> 319          NA          NA #> 320          NA          NA #> 321          NA          NA #> 322          NA          NA #> 323          NA          NA #> 324          NA          NA #> 325          NA          NA"},{"path":"https://smwoodman.github.io/eSDM/reference/overlay_sdm.html","id":null,"dir":"Reference","previous_headings":"","what":"Overlay SDM predictions onto base geometry — overlay_sdm","title":"Overlay SDM predictions onto base geometry — overlay_sdm","text":"Overlay specified SDM predictions meet percent overlap threshold requirement onto base geometry","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/overlay_sdm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Overlay SDM predictions onto base geometry — overlay_sdm","text":"","code":"overlay_sdm(base.geom, sdm, sdm.idx, overlap.perc)"},{"path":"https://smwoodman.github.io/eSDM/reference/overlay_sdm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Overlay SDM predictions onto base geometry — overlay_sdm","text":"base.geom object class sfc; base geometry sdm object class sf; original SDM predictions sdm.idx names indices column(s) data overlaid overlap.perc numeric; percent overlap threshold, .e. percentage base geometry polygon must overlap SDM prediction polygons overlaid density value calculated set NA","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/overlay_sdm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Overlay SDM predictions onto base geometry — overlay_sdm","text":"Object class sf geometry base.geom   data sdm.idx columns sdm overlaid onto   geometry. Note means columns sdm sdm.idx returned object.   data considered spatially intensive, agr  attribute set 'constant' columns returned object","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/overlay_sdm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Overlay SDM predictions onto base geometry — overlay_sdm","text":"See eSDM GUI manual specifics overlay process.   process equivalent areal interpolation (Goodchild Lam 1980),   base.geom target, sdm source, data   specified sdm.idx spatially intensive. Note overlay_sdm removes rows sdm NA values   first column specified sdm.idx (.e. sdm.idx[1]),   overlay.   Thus, valid overlay results, columns sdm specified   sdm.idx must either NA values rows   contain NAs.","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/overlay_sdm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Overlay SDM predictions onto base geometry — overlay_sdm","text":"Goodchild, M.F. & Lam, N.S.-N. (1980) Areal interpolation:   variant traditional spatial problem. Geo-Processing, 1, 297-312.","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/overlay_sdm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Overlay SDM predictions onto base geometry — overlay_sdm","text":"","code":"pol1.geom <- sf::st_sfc(   sf::st_polygon(list(rbind(c(1,1), c(3,1), c(3,3), c(1,3), c(1,1)))),   crs = 4326 ) pol2.geom <- sf::st_sfc(   sf::st_polygon(list(rbind(c(0,0), c(2,0), c(2,2), c(0,2), c(0,0)))),   crs = 4326 ) pol2.sf <- sf::st_sf(data.frame(Dens = 0.5), geometry = pol2.geom, crs = 4326)  overlay_sdm(pol1.geom, pol2.sf, 1, 25) #> Simple feature collection with 1 feature and 1 field #> Attribute-geometry relationship: 1 constant, 0 aggregate, 0 identity #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 1 xmax: 3 ymax: 3 #> Geodetic CRS:  WGS 84 #>   Dens                       geometry #> 1  0.5 POLYGON ((1 1, 3 1, 3 3, 1 ...  # Output 'Dens' value is NA because of higher overlap.perc value overlay_sdm(pol1.geom, pol2.sf, 1, 50) #> Simple feature collection with 1 feature and 1 field #> Attribute-geometry relationship: 1 constant, 0 aggregate, 0 identity #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 1 xmax: 3 ymax: 3 #> Geodetic CRS:  WGS 84 #>   Dens                       geometry #> 1   NA POLYGON ((1 1, 3 1, 3 3, 1 ...  # These examples take longer to run overlay_sdm(sf::st_geometry(preds.1), preds.2, 1, 50) #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> Warning: The output of st_intersection(sdm, base.geom) was invalid - this was corrected via sf::st_make_valid(st_intersection(sdm, base.geom)) #> Simple feature collection with 325 features and 1 field #> Attribute-geometry relationship: 1 constant, 0 aggregate, 0 identity #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -123 ymin: 32 xmax: -117 ymax: 35 #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> Geodetic CRS:  WGS 84 #> First 10 features: #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #>         Density                       geometry #> 1  0.0007590172 POLYGON ((-122.875 32.125, ... #> 2  0.0006972454 POLYGON ((-122.625 32.125, ... #> 3  0.0010751592 POLYGON ((-122.375 32.125, ... #> 4  0.0018757942 POLYGON ((-122.125 32.125, ... #> 5  0.0022005824 POLYGON ((-121.875 32.125, ... #> 6  0.0023619783 POLYGON ((-121.625 32.125, ... #> 7  0.0021131121 POLYGON ((-121.375 32.125, ... #> 8  0.0019934417 POLYGON ((-121.125 32.125, ... #> 9  0.0020992076 POLYGON ((-120.875 32.125, ... #> 10 0.0020969021 POLYGON ((-120.625 32.125, ... overlay_sdm(sf::st_geometry(preds.2), preds.1, \"Density\", 50) #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> Warning: The output of st_intersection(sdm, base.geom) was invalid - this was corrected via sf::st_make_valid(st_intersection(sdm, base.geom)) #> Simple feature collection with 1891 features and 1 field #> Attribute-geometry relationship: 1 constant, 0 aggregate, 0 identity #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -123 ymin: 32 xmax: -117 ymax: 35 #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> Geodetic CRS:  WGS 84 #> First 10 features: #> old-style crs object detected; please recreate object with a recent sf::st_crs() #> old-style crs object detected; please recreate object with a recent sf::st_crs() #>       Density                       geometry #> 1  0.18149697 POLYGON ((-122.95 32.05, -1... #> 2  0.14315865 POLYGON ((-122.85 32.05, -1... #> 3  0.02813584 POLYGON ((-122.75 32.05, -1... #> 4  0.02813584 POLYGON ((-122.65 32.05, -1... #> 5  0.05654697 POLYGON ((-122.55 32.05, -1... #> 6  0.06602004 POLYGON ((-122.45 32.05, -1... #> 7  0.05677412 POLYGON ((-122.35 32.05, -1... #> 8  0.02904423 POLYGON ((-122.25 32.05, -1... #> 9  0.02904423 POLYGON ((-122.15 32.05, -1... #> 10 0.03472953 POLYGON ((-122.05 32.05, -1..."},{"path":"https://smwoodman.github.io/eSDM/reference/preds.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample SDM density predictions — preds","title":"Sample SDM density predictions — preds","text":"preds.1, preds.2, preds.3 objects class sf serve   sample sets SDM density predictions eSDM package","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/preds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample SDM density predictions — preds","text":"","code":"preds.1  preds.2  preds.3"},{"path":"https://smwoodman.github.io/eSDM/reference/preds.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample SDM density predictions — preds","text":"Objects class sf column density predictions (name: Density)   simple feature list column (name: geometry).   preds.1 also second column sample density predictions (name: Density2),   well Var1 Var2, representing variance preds1: object class sf (inherits data.frame) 325 rows 5 columns. preds2: object class sf (inherits data.frame) 1891 rows 2 columns. preds3: object class sf (inherits data.frame) 1445 rows 2 columns. object class sf (inherits data.frame) 1891 rows 2 columns. object class sf (inherits data.frame) 1445 rows 2 columns.","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/preds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample SDM density predictions — preds","text":"preds.1 sample SDM density predictions created importing   Sample_predictions_2.csv eSDM GUI, exporting predictions,   clipping SoCal_bite.csv region.   Also manually added two variance columns (numbers randomly generated max 0.01) preds.2 sample SDM density predictions created importing   Sample_predictions_1.csv eSDM GUI, exporting predictions,   clipping SoCal_bite.csv region preds.3 set sample SDM density predictions created importing   Sample_predictions_4_gdb eSDM GUI, exporting predictions,   clipping SoCal_bite.csv region","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/pts2poly_centroids.html","id":null,"dir":"Reference","previous_headings":"","what":"Create polygons from centroid coordinates — pts2poly_centroids","title":"Create polygons from centroid coordinates — pts2poly_centroids","text":"Create polygon(s) data frame coordinates polygon centroid(s)","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/pts2poly_centroids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create polygons from centroid coordinates — pts2poly_centroids","text":"","code":"pts2poly_centroids(x, y, ...)"},{"path":"https://smwoodman.github.io/eSDM/reference/pts2poly_centroids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create polygons from centroid coordinates — pts2poly_centroids","text":"x data frame least two columns; first two columns must contain longitude latitude coordinates, respectively. See 'Details' section additional columns handled y numeric; perpendicular distance polygon centroid (center) edge (.e. half length one side polygon) ... passed st_sf st_sfc, e.g. passing named arguments crs agr","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/pts2poly_centroids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create polygons from centroid coordinates — pts2poly_centroids","text":"Object class sfc (x exactly two columns) class sf  (x exactly two columns). object geometry type POLYGON.   object class sf, name geometry list-column \"geometry\"","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/pts2poly_centroids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create polygons from centroid coordinates — pts2poly_centroids","text":"function designed someone reads .csv file   grid coordinates representing SDM prediction points needs create   prediction polygons .csv file coordinates polygon centroids.   However, function can used create square polygons size around provided points,   regardless polygons touch overlap.   created polygons oriented , 2D plane, edges parallel either x y axis. x contains two column, additional columns treated simple feature attributes,   .e. passed along first argument st_sf crs specified ...,   crs attribute polygon(s) NULL.","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/pts2poly_centroids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create polygons from centroid coordinates — pts2poly_centroids","text":"","code":"# Create an sfc object from a data frame of two columns x <- data.frame(   lon = c(5, 10, 15, 20, 5, 10, 15, 20),   lat = c(5, 5, 5, 5, 10, 10, 10, 10) ) pts2poly_centroids(x, 2.5, crs = 4326) #> Geometry set for 8 features  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 2.5 ymin: 2.5 xmax: 22.5 ymax: 12.5 #> Geodetic CRS:  WGS 84 #> First 5 geometries: #> POLYGON ((7.5 7.5, 2.5 7.5, 2.5 2.5, 7.5 2.5, 7... #> POLYGON ((12.5 7.5, 7.5 7.5, 7.5 2.5, 12.5 2.5,... #> POLYGON ((17.5 7.5, 12.5 7.5, 12.5 2.5, 17.5 2.... #> POLYGON ((22.5 7.5, 17.5 7.5, 17.5 2.5, 22.5 2.... #> POLYGON ((7.5 12.5, 2.5 12.5, 2.5 7.5, 7.5 7.5,...  # Create an sf object from a data frame of more than two columns x <- data.frame(   lon = c(5, 10, 15, 20, 5, 10, 15, 20),   lat = c(5, 5, 5, 5, 10, 10, 10, 10),   sdm.pred = runif(8),   sdm.pred2 = runif(8) ) pts2poly_centroids(x, 2.5, crs = 4326, agr = \"constant\") #> Simple feature collection with 8 features and 2 fields #> Attribute-geometry relationship: 2 constant, 0 aggregate, 0 identity #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 2.5 ymin: 2.5 xmax: 22.5 ymax: 12.5 #> Geodetic CRS:  WGS 84 #>     sdm.pred sdm.pred2                       geometry #> 1 0.08638271 0.6929200 POLYGON ((7.5 7.5, 2.5 7.5,... #> 2 0.73412649 0.3983266 POLYGON ((12.5 7.5, 7.5 7.5... #> 3 0.91692030 0.9832016 POLYGON ((17.5 7.5, 12.5 7.... #> 4 0.72665924 0.9756395 POLYGON ((22.5 7.5, 17.5 7.... #> 5 0.76564480 0.8850391 POLYGON ((7.5 12.5, 2.5 12.... #> 6 0.82001306 0.4498673 POLYGON ((12.5 12.5, 7.5 12... #> 7 0.17446567 0.5848538 POLYGON ((17.5 12.5, 12.5 1... #> 8 0.32012744 0.8110220 POLYGON ((22.5 12.5, 17.5 1..."},{"path":"https://smwoodman.github.io/eSDM/reference/pts2poly_vertices.html","id":null,"dir":"Reference","previous_headings":"","what":"Create polygons from vertex coordinates — pts2poly_vertices","title":"Create polygons from vertex coordinates — pts2poly_vertices","text":"Create polygon(s) data frame coordinates polygon vertices","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/pts2poly_vertices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create polygons from vertex coordinates — pts2poly_vertices","text":"","code":"pts2poly_vertices(x, ...)"},{"path":"https://smwoodman.github.io/eSDM/reference/pts2poly_vertices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create polygons from vertex coordinates — pts2poly_vertices","text":"x data frame least two columns; first two columns must contain longitude latitude coordinates, respectively. See 'Details' section additional columns handled ... passed st_sfc, e.g. passing named argument crs","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/pts2poly_vertices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create polygons from vertex coordinates — pts2poly_vertices","text":"Object class sfc geometry type POLYGON","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/pts2poly_vertices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create polygons from vertex coordinates — pts2poly_vertices","text":"Vertices different polygons must demarcated rows values NA   first second columns (.e. longitude latitude columns). columns x besides first two columns ignored. crs specified ...,   crs attribute polygon(s) NULL.","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/pts2poly_vertices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create polygons from vertex coordinates — pts2poly_vertices","text":"","code":"x <- data.frame(   lon = c(40, 40, 50, 50, 40),   lat = c(0, 10, 10, 0, 0) ) pts2poly_vertices(x, crs = 4326) #> Geometry set for 1 feature  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 40 ymin: 0 xmax: 50 ymax: 10 #> Geodetic CRS:  WGS 84 #> POLYGON ((40 0, 40 10, 50 10, 50 0, 40 0))  # Create an sf object x <- data.frame(   lon = c(40, 40, 50, 50, 40, NA, 20, 20, 30, 30, 20),   lat = c(0, 10, 10, 0, 0, NA, 0, 10, 10, 0, 0) ) sf::st_sf(Pred = 1:2, geometry = pts2poly_vertices(x, crs = 4326)) #> Simple feature collection with 2 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 20 ymin: 0 xmax: 50 ymax: 10 #> Geodetic CRS:  WGS 84 #>   Pred                       geometry #> 1    1 POLYGON ((40 0, 40 10, 50 1... #> 2    2 POLYGON ((20 0, 20 10, 30 1..."},{"path":"https://smwoodman.github.io/eSDM/reference/validation.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample validation data — validation.data","title":"Sample validation data — validation.data","text":"Sample validation data created cropping Validation_data.csv SoCal_bite.csv region   (.csv files ...)","code":""},{"path":"https://smwoodman.github.io/eSDM/reference/validation.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample validation data — validation.data","text":"","code":"validation.data"},{"path":"https://smwoodman.github.io/eSDM/reference/validation.data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample validation data — validation.data","text":"object class sf 8 rows 3 variables sight 1's 0's indicating species presence/absence count number individuals observed point geometry simple feature list column representing validation data points","code":""},{"path":"https://smwoodman.github.io/eSDM/news/index.html","id":"esdm-037","dir":"Changelog","previous_headings":"","what":"eSDM 0.3.7","title":"eSDM 0.3.7","text":"CRAN release: 2021-05-04 Updated overlay_sdm stay current sf 1.0 (#12)","code":""},{"path":"https://smwoodman.github.io/eSDM/news/index.html","id":"esdm-036","dir":"Changelog","previous_headings":"","what":"eSDM 0.3.6","title":"eSDM 0.3.6","text":"Fixed bug stay current shiny package (using %% function) - changes user functionality","code":""},{"path":"https://smwoodman.github.io/eSDM/news/index.html","id":"esdm-035","dir":"Changelog","previous_headings":"","what":"eSDM 0.3.5","title":"eSDM 0.3.5","text":"CRAN release: 2020-09-06 Use == rather identical check CRS equivalence (#10) Fixed bug GUI static previews downloaded “Dimensions ‘Static Preview’ window” exact dimensions window","code":""},{"path":"https://smwoodman.github.io/eSDM/news/index.html","id":"esdm-034","dir":"Changelog","previous_headings":"","what":"eSDM 0.3.4","title":"eSDM 0.3.4","text":"CRAN release: 2020-04-26 Fixed bug eSDM GUI - invalid error message printed packages installed","code":""},{"path":"https://smwoodman.github.io/eSDM/news/index.html","id":"esdm-033","dir":"Changelog","previous_headings":"","what":"eSDM 0.3.3","title":"eSDM 0.3.3","text":"CRAN release: 2020-04-15 Import st_make_valid sf rather lwgeom (#9) Use shinybusy rather shinycssloaders eSDM GUI unknown error Move packages used GUI (shiny app) Suggests","code":""},{"path":"https://smwoodman.github.io/eSDM/news/index.html","id":"esdm-032","dir":"Changelog","previous_headings":"","what":"eSDM 0.3.2","title":"eSDM 0.3.2","text":"CRAN release: 2019-12-16 Updated citation details MEE issue page numbers Updated vignette formatting","code":""},{"path":"https://smwoodman.github.io/eSDM/news/index.html","id":"esdm-031","dir":"Changelog","previous_headings":"","what":"eSDM 0.3.1","title":"eSDM 0.3.1","text":"CRAN release: 2019-10-17 Fixed bug eSDM GUI ‘update map range’ button Fixed bug evaluation_metrics validation data contains NA values subsetting single column, replaced [,] [[]] data frames tibbles return vector Improved documentation messages GUI Added eSDM paper citation details (doi, etc) applicable","code":""},{"path":"https://smwoodman.github.io/eSDM/news/index.html","id":"esdm-030","dir":"Changelog","previous_headings":"","what":"eSDM 0.3.0","title":"eSDM 0.3.0","text":"CRAN release: 2019-08-19 Updated citation ‘press’ Methods Ecology Evolution Added button download manuscript example analysis data GUI Added ability tick marks high quality maps (tmap update) Explicitly call dplyr::select, case masked raster::select Fixed bug exporting predictions GUI shapefile (now use zip package) Fixed bug downloading evaluation metrics GUI Now call addMouseCoordinates leafem rather mapview","code":""},{"path":"https://smwoodman.github.io/eSDM/news/index.html","id":"esdm-021","dir":"Changelog","previous_headings":"","what":"eSDM 0.2.1","title":"eSDM 0.2.1","text":"CRAN release: 2019-07-26 Initial release","code":""}]
